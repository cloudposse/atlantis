// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/runatlantis/atlantis/server/events/yaml (interfaces: ParserValidator)

package mocks

import (
	"reflect"

	valid "github.com/cloudposse/atlantis/server/events/yaml/valid"
	pegomock "github.com/petergtz/pegomock"
)

type MockParserValidator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockParserValidator() *MockParserValidator {
	return &MockParserValidator{fail: pegomock.GlobalFailHandler}
}

func (mock *MockParserValidator) ReadConfig(repoDir string) (valid.Config, error) {
	params := []pegomock.Param{repoDir}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ReadConfig", params, []reflect.Type{reflect.TypeOf((*valid.Config)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 valid.Config
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(valid.Config)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockParserValidator) VerifyWasCalledOnce() *VerifierParserValidator {
	return &VerifierParserValidator{mock, pegomock.Times(1), nil}
}

func (mock *MockParserValidator) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierParserValidator {
	return &VerifierParserValidator{mock, invocationCountMatcher, nil}
}

func (mock *MockParserValidator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierParserValidator {
	return &VerifierParserValidator{mock, invocationCountMatcher, inOrderContext}
}

type VerifierParserValidator struct {
	mock                   *MockParserValidator
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierParserValidator) ReadConfig(repoDir string) *ParserValidator_ReadConfig_OngoingVerification {
	params := []pegomock.Param{repoDir}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ReadConfig", params)
	return &ParserValidator_ReadConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type ParserValidator_ReadConfig_OngoingVerification struct {
	mock              *MockParserValidator
	methodInvocations []pegomock.MethodInvocation
}

func (c *ParserValidator_ReadConfig_OngoingVerification) GetCapturedArguments() string {
	repoDir := c.GetAllCapturedArguments()
	return repoDir[len(repoDir)-1]
}

func (c *ParserValidator_ReadConfig_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
